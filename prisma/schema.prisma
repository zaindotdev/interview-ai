// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}

model User {
  id          String             @id @default(uuid())
  username    String             @unique
  fullName    String
  email       String             @unique
  password    String
  role        Role               @default(CANDIDATE)
  resumes     Resume[]
  jobPosts    JobListing[]       @relation("RecruiterJobs")
  sessions    InterviewSession[] @relation("CandidateSessions")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Resume {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  fileUrl   String
  parsedJson Json
  createdAt DateTime @default(now())
}

model JobListing {
  id           String             @id @default(uuid())
  title        String
  description  String
  skills       String[]
  recruiter    User               @relation("RecruiterJobs", fields: [recruiterId], references: [id])
  recruiterId  String
  sessions     InterviewSession[]
  createdAt    DateTime           @default(now())
}

model InterviewSession {
  id           String     @id @default(uuid())
  candidate    User       @relation("CandidateSessions", fields: [candidateId], references: [id])
  candidateId  String
  job          JobListing @relation(fields: [jobId], references: [id])
  jobId        String
  transcript   Json?
  score        Int?
  feedback     String?
  recordingUrl String? // Optional: store interview video/audio
  createdAt    DateTime  @default(now())
}
