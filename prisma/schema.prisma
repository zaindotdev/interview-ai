generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum PaymentMethod {
  PAYPAL
  STRIPE
}

model User {
  id                   String                  @id @unique @default(uuid())
  username             String?
  name                 String?
  otp                  String?                 @unique
  otpExpiry            DateTime?
  email                String                  @unique
  emailVerified        Boolean?
  phone_number         String?
  image                String?
  hasOnboarded         Boolean                 @default(false)
  password             String?
  role                 Role                    @default(CANDIDATE)
  resumes              Resume[]
  isSubscribed         Boolean                 @default(false)
  subscription         Subscription?
  mockInterviewId      String?
  subscriptionId       String?
  Account              Account[]
  Session              Session[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  mockInterviewHistory MockInterviewsHistory[]

  @@unique([email, role])
  @@index([email], map: "user_email_idx")
}

model Resume {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fileUrl    String
  parsedJson Json
  createdAt  DateTime @default(now())

  @@index([userId], map: "resume_user_id_idx")
}

model MockInterviews {
  id                    String                  @id @unique @default(uuid())
  topic                 String                  @unique
  description           String
  focus                 String[]
  estimated_time        Int
  difficulty            String
  candidateId           String
  createdAt             DateTime                @default(now())
  mockInterviewsHistory MockInterviewsHistory[]

  @@index([candidateId], map: "mock_interviews_candidate_id_idx")
}

model MockInterviewsReport {
  id          String   @id @unique @default(uuid())
  callId      String
  candidateId String
  report      String
  metaData    String
  createdAt   DateTime @default(now())

  MockInterviewsHistory MockInterviewsHistory[]

  @@index([candidateId], map: "mock_interviews_report_candidate_id_idx")
}

model MockInterviewsHistory {
  id               String  @id @default(uuid())
  mockInterviewId  String
  candidateId      String
  status           String  @default("completed") // e.g. pending, ongoing, completed, cancelled
  duration         Int? // store duration in seconds/minutes
  transcripts      Json? // raw transcript if you want to keep it
  feedbackReportId String? // optional link to MockInterviewsReport

  mockInterview       MockInterviews        @relation(fields: [mockInterviewId], references: [id], onDelete: Cascade)
  candidate           User                  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  mockInterviewReport MockInterviewsReport? @relation(fields: [feedbackReportId], references: [id])

  createdAt DateTime @default(now())

  @@index([mockInterviewId], map: "history_mock_interview_id_idx")
  @@index([candidateId], map: "history_candidate_id_idx")
}

model Subscription {
  id        String  @id @default(cuid())
  userId    String  @unique
  paymentId String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([userId, paymentId])
  @@index([userId], map: "subscription_user_id_idx")
  @@index([paymentId], map: "subscription_payment_id_idx")
}

model Payment {
  id           String        @id @default(cuid())
  amount       Float
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  method       PaymentMethod @default(STRIPE)
  createdAt    DateTime      @default(now())
  subscription Subscription?

  @@unique([status, method])
  @@index([status], map: "payment_status_idx")
  @@index([method], map: "payment_method_idx")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([token], map: "verification_token_token_idx")
}
