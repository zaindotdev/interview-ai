generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum PaymentMethod {
  PAYPAL
  STRIPE
}

model User {
  id             String             @id @default(uuid())
  username       String?
  name           String?
  email          String             @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role               @default(CANDIDATE)
  resumes        Resume[]
  jobPosts       JobListing[]       @relation("RecruiterJobs")
  sessions       InterviewSession[] @relation("CandidateSessions")
  subscription   Subscription?
  subscriptionId String?
  Account        Account[]
  Session        Session[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Resume {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fileUrl    String
  parsedJson Json
  createdAt  DateTime @default(now())
}

model JobListing {
  id          String             @id @default(uuid())
  title       String
  description String
  skills      String[]
  recruiter   User               @relation("RecruiterJobs", fields: [recruiterId], references: [id])
  recruiterId String
  sessions    InterviewSession[]
  createdAt   DateTime           @default(now())
}

model InterviewSession {
  id                 String     @id @default(uuid())
  candidate          User       @relation("CandidateSessions", fields: [candidateId], references: [id])
  candidateId        String
  job                JobListing @relation(fields: [jobId], references: [id])
  jobId              String
  transcript         Json?
  score              Int?
  technicalScore     Int?
  behavioralScore    Int?
  communicationScore Int?
  feedback           String?
  recordingUrl       String?
  time               DateTime?
  createdAt          DateTime   @default(now())
}

model Subscription {
  id        String  @id @default(cuid())
  userId    String  @unique
  paymentId String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Payment {
  id           String        @id @default(cuid())
  amount       Float
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  method       PaymentMethod @default(STRIPE)
  createdAt    DateTime      @default(now())
  subscription Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([token], map: "verification_token_token_idx")
}
