generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum PaymentMethod {
  PAYPAL
  STRIPE
}

model User {
  id              String        @id @unique @default(uuid())
  username        String?
  name            String?
  otp             String?          @unique
  otpExpiry       DateTime?
  email           String        @unique
  emailVerified   Boolean?
  image           String?
  password        String?
  role            Role          @default(CANDIDATE)
  resumes         Resume[]
  jobPosts        JobListing[]  @relation("RecruiterJobs")
  subscription    Subscription?
  mockInterviewId String?
  subscriptionId  String?
  Account         Account[]
  Session         Session[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([email, role])
  @@index([email], map: "user_email_idx")
}

model Resume {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fileUrl    String
  parsedJson Json
  createdAt  DateTime @default(now())

  @@index([userId], map: "resume_user_id_idx")
}

model JobListing {
  id          String   @id @default(uuid())
  title       String
  description String
  skills      String[]
  recruiter   User     @relation("RecruiterJobs", fields: [recruiterId], references: [id])
  recruiterId String
  createdAt   DateTime @default(now())

  @@unique([recruiterId, title])
  @@index([recruiterId], map: "job_recruiter_id_idx")
}

model MockInterviews {
  id             String   @id @unique @default(uuid())
  topic          String   @unique
  description    String
  focus          String[]
  estimated_time Int
  difficulty     String
  candidateId    String
  createdAt      DateTime @default(now())

  @@index([candidateId], map: "mock_interviews_candidate_id_idx")
}

model Subscription {
  id        String  @id @default(cuid())
  userId    String  @unique
  paymentId String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([userId, paymentId])
  @@index([userId], map: "subscription_user_id_idx")
  @@index([paymentId], map: "subscription_payment_id_idx")
}

model Payment {
  id           String        @id @default(cuid())
  amount       Float
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  method       PaymentMethod @default(STRIPE)
  createdAt    DateTime      @default(now())
  subscription Subscription?

  @@unique([status, method])
  @@index([status], map: "payment_status_idx")
  @@index([method], map: "payment_method_idx")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@index([token], map: "verification_token_token_idx")
}
